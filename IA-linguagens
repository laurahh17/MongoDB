//importa módulos necessários da biblioteca '@google/generative-ai'
import {
    GoogleGenerativeAI, //classe para interagir com o Google Generative AI
    HarmCategory, //enum para categorias de conteúdo prejudicial
    HarmBlockThreshold //enum para os niveis de bloqueio de conteudo prejudicial
} from "@google/generative-ai";

//importa a biblioteca 'chalk' para estilização de texto no console
import chalk from 'chalk';

//importa a biblioteca 'ora' para exibir uma mensagem de carregamento (spinner)
import ora from 'ora';

//importa a biblioteca 'prompt-sync' para ler etradas do usuario sincronamente
import prompt from 'prompt-sync';

//cria uma instancia da função prompt-sync para ler entradas do usuario
const promptSync = prompt();

//define o nome do modelo que sera utilizado na geração de respostas
const MODEL_NAME = "gemini-2.0-flash";

//define a chave da API para autenticação com o Google Generative AI
const API_KEY = "AIzaSyClvZ_ixEgJu7Ondt3_HZtTYcnK_MF2xfw"

//configuração de geração para o modelo, ajustando parametros como temperatura e tokens de saida
const GENERATION_CONFIG  {
    temperature: 0.9, //define a criatividade da resposta; valores mais altos resultam em respostas mais variadas
    topK: 1, //controla o numero de palavras candidatas consideradas durante a geração
    topP: 1, //controla a pobabilidade cumulativa das palabras candidatas consideradas
    maxOutputTokens: 2048, //define o numero maximo de tokens (palavras) na resposta gerada
};

//configuração de segurança para filtrar conteudo prejudicial com diferentes categorias e limiares
const SAFETY_SETTINGS = [{
    category: HarmCategory.HARM_CATEGORY_HARASSMENT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
},
{
    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
},
{
    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
},
{
    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
},
];

//função assincrona que inicializa e executa o chat com o modelo de IA
async function runChat() {
    //cria e inicia um spinner para indicar que o chat está sendo inicializado
    const spinner = ora('Inicializando chat...').start();
    try{
        //cria uma instancia da classe GoogleGenerativeAI com a chave da API
        const genAI = new GoogleGenerativeAI(API_KEY);

        //obtem o mdelo generativo especificado usando o nome do modelo
        const model = genAI.getGenerativeModel({
            model: MODEL_NAME
        });

        //inicia uma sessao de chat com as configurações de geração e segurança definidas
        const chat = model.startChat({
            generationConfig: GENERATION_CONFIG,
            safetySettings: SAFETY_SETTINGS,
            history: [], //inicializa o historico do chat como vazio
        });

        //para o spinner pois a inicialização foi concluida
        spinner.stop();

        //loop infinito para ler entradas do usuario e gerar respostas
        while (true) {
            //le a entrada do usuario, exibindo um promt verde "Você: "
            const userInput = promptSync(chalk.green('Você: '));

            //verifica se a entrada do usuario é 'exit' (ignora maiusculas/minusculas)
            if (userInput.toLowerCase() === 'exit') {
                //exibe uma mensagem de despedida e encerra o processo
                console.log(chalk.yellow('Até breve!'));
                process.exit(0); //encerra o processo com código de saida 0 (sucesso)
            }

            //envia a mensagem do usuario para o chat e aguarda a resposta
            const result = await chat.sendMessage(userInput);

            //verifiva se houve um erro na resposta da IA
            if (result.error) {
                //exibe uma mensagem de erro em vermelho
                console.error(chalk.red('AI Erro:'), result.error.message);
                continue; // continua o loop para permitir novas entradas do usuario
            }

            //obtem o texto da resposta da IA
            const response = result.response.text();
            //exibe a resposta da IA em azul
            console.log(chalk.blue('Ai:'), response);
        }
    } catch (error) {
        //para o spinner se ocorrer um erro
        spinner.stop();
        //exibe uma mensahem de erro em vermelho
        console.error(chalk.red('Erro encontrado: '), error.message);
        //emcerra o processo com codigo de saida 1 (erro)
        process.exit(1);
    }
}

//chama a função runChat para iniciar o chat
runChat();
